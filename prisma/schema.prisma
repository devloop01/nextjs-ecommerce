datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type ProductPrice {
  value        Float
  currencyCode String? @default("INR")
}

type ProductImage {
  url String
  alt String?
}

type ProductCategory {
  // make this a model
  name        String
  description String
}

type ProductDiscount {
  value  Float
  active Boolean
}

type ProductPricePerUnit {
  price Float
  unit  String
}

type ProductPack {
  amount Int
  unit   String
}

type ProductReview {
  // change to model
  rating Float
  // userId 
  title  String?
  review String?
}

model Product {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  // sku          String?
  category     String
  discount     ProductDiscount
  pricePerUnit ProductPricePerUnit
  packs        ProductPack[]
  images       ProductImage[]
  inStock      Boolean
  reviews      ProductReview[]
  totalReviews Int
  avgRating    Float
  slug         String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("products")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
